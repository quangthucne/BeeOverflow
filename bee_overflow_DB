-- Create the database
CREATE DATABASE bee_overflow;
USE bee_overflow;

-- Create table: rank
CREATE TABLE `rank` (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    icon VARCHAR(255)
);

-- Create table: roles
CREATE TABLE roles (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL
);

-- Create table: account
CREATE TABLE account (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL UNIQUE,
    fullname VARCHAR(100),
    email VARCHAR(100) NOT NULL UNIQUE,
    avatar VARCHAR(255),
    phone VARCHAR(20),
    password VARCHAR(255) NOT NULL,
    point INT DEFAULT 0,
    isActive BOOLEAN DEFAULT TRUE
);

-- Create table: reputation
CREATE TABLE reputation (
    id INT PRIMARY KEY AUTO_INCREMENT,
    account_id INT NOT NULL,
    rank_id INT NOT NULL,
    point INT NOT NULL,
    FOREIGN KEY (account_id) REFERENCES account(id) ON DELETE CASCADE,
    FOREIGN KEY (rank_id) REFERENCES `rank`(id) ON DELETE RESTRICT
);

-- Create table: authentication
CREATE TABLE authentication (
    id INT PRIMARY KEY AUTO_INCREMENT,
    account_id INT NOT NULL,
    role_id INT NOT NULL,
    FOREIGN KEY (account_id) REFERENCES account(id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE RESTRICT
);

-- Create table: questions
CREATE TABLE questions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    account_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    detail TEXT,
    isDeleted BOOLEAN DEFAULT FALSE,
    isCheck BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (account_id) REFERENCES account(id) ON DELETE CASCADE
);

-- Create table: question_vote
CREATE TABLE question_vote (
    id INT PRIMARY KEY AUTO_INCREMENT,
    question_id INT NOT NULL,
    count INT DEFAULT 0,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);

-- Create table: tags
CREATE TABLE tags (
    id INT PRIMARY KEY AUTO_INCREMENT,
    question_id INT NOT NULL,
    name VARCHAR(50) NOT NULL,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);

-- Create table: answer
CREATE TABLE answer (
    id INT PRIMARY KEY AUTO_INCREMENT,
    account_id INT NOT NULL,
    question_id INT NOT NULL,
    content TEXT NOT NULL,
    detail TEXT,
    isDeleted BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (account_id) REFERENCES account(id) ON DELETE CASCADE,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);

-- Create table: ans_vote
CREATE TABLE ans_vote (
    id INT PRIMARY KEY AUTO_INCREMENT,
    ans_id INT NOT NULL,
    count INT DEFAULT 0,
    FOREIGN KEY (ans_id) REFERENCES answer(id) ON DELETE CASCADE
);

-- Create table: doc_detail
CREATE TABLE doc_detail (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name_doc VARCHAR(255) NOT NULL,
    description TEXT,
    doc_src VARCHAR(255),
    price DECIMAL(10, 2),
    isDeleted BOOLEAN DEFAULT FALSE
);

-- Create table: document
CREATE TABLE document (
    id INT PRIMARY KEY AUTO_INCREMENT,
    account_id INT NOT NULL,
    doc_detail_id INT NOT NULL,
    FOREIGN KEY (account_id) REFERENCES account(id) ON DELETE CASCADE,
    FOREIGN KEY (doc_detail_id) REFERENCES doc_detail(id) ON DELETE RESTRICT
);

-- Create table: order
CREATE TABLE `order` (
    id INT PRIMARY KEY AUTO_INCREMENT,
    account_id INT NOT NULL,
    FOREIGN KEY (account_id) REFERENCES account(id) ON DELETE CASCADE
);

-- Create table: order_detail
CREATE TABLE order_detail (
    id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT NOT NULL,
    doc_id INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES `order`(id) ON DELETE CASCADE,
    FOREIGN KEY (doc_id) REFERENCES doc_detail(id) ON DELETE RESTRICT
);
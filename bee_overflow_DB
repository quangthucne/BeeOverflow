-- we don't know how to generate root <with-no-name> (class Root) :(

grant select on performance_schema.* to 'mysql.session'@localhost;

grant trigger on sys.* to 'mysql.sys'@localhost;

grant audit_abort_exempt, firewall_exempt, select, system_user on *.* to 'mysql.infoschema'@localhost;

grant audit_abort_exempt, authentication_policy_admin, backup_admin, clone_admin, connection_admin, firewall_exempt, persist_ro_variables_admin, session_variables_admin, shutdown, super, system_user, system_variables_admin on *.* to 'mysql.session'@localhost;

grant audit_abort_exempt, firewall_exempt, system_user on *.* to 'mysql.sys'@localhost;

grant allow_nonexistent_definer, alter, alter routine, application_password_admin, audit_abort_exempt, audit_admin, authentication_policy_admin, backup_admin, binlog_admin, binlog_encryption_admin, clone_admin, connection_admin, create, create role, create routine, create tablespace, create temporary tables, create user, create view, create_spatial_reference_system, delete, drop, drop role, encryption_key_admin, event, execute, file, firewall_exempt, flush_optimizer_costs, flush_privileges, flush_status, flush_tables, flush_user_resources, group_replication_admin, group_replication_stream, index, innodb_redo_log_archive, innodb_redo_log_enable, insert, lock tables, optimize_local_table, passwordless_user_admin, persist_ro_variables_admin, process, references, reload, replication client, replication slave, replication_applier, replication_slave_admin, resource_group_admin, resource_group_user, role_admin, select, sensitive_variables_observer, service_connection_admin, session_variables_admin, set_any_definer, show databases, show view, show_routine, shutdown, super, system_user, system_variables_admin, table_encryption_admin, telemetry_log_admin, transaction_gtid_tag, trigger, update, xa_recover_admin, grant option on *.* to root;

grant allow_nonexistent_definer, alter, alter routine, application_password_admin, audit_abort_exempt, audit_admin, authentication_policy_admin, backup_admin, binlog_admin, binlog_encryption_admin, clone_admin, connection_admin, create, create role, create routine, create tablespace, create temporary tables, create user, create view, create_spatial_reference_system, delete, drop, drop role, encryption_key_admin, event, execute, file, firewall_exempt, flush_optimizer_costs, flush_privileges, flush_status, flush_tables, flush_user_resources, group_replication_admin, group_replication_stream, index, innodb_redo_log_archive, innodb_redo_log_enable, insert, lock tables, optimize_local_table, passwordless_user_admin, persist_ro_variables_admin, process, references, reload, replication client, replication slave, replication_applier, replication_slave_admin, resource_group_admin, resource_group_user, role_admin, select, sensitive_variables_observer, service_connection_admin, session_variables_admin, set_any_definer, show databases, show view, show_routine, shutdown, super, system_user, system_variables_admin, table_encryption_admin, telemetry_log_admin, transaction_gtid_tag, trigger, update, xa_recover_admin, grant option on *.* to root@localhost;

create table account
(
    id        int auto_increment
        primary key,
    username  varchar(100)            not null,
    fullname  varchar(255)            null,
    email     varchar(255)            null,
    avatar    varchar(255)            null,
    phone     varchar(20)             null,
    password  varchar(255)            null,
    isActive  tinyint(1) default 1    null,
    role      int                     not null,
    gender    int                     not null,
    is_active bit        default b'1' null
);

create table document_detail
(
    id          int auto_increment
        primary key,
    name_doc    varchar(255)            null,
    description tinytext                null,
    doc_src     varchar(255)            null,
    price       int                     null,
    isDeleted   tinyint(1) default 0    null,
    is_deleted  bit        default b'0' null,
    is_free     tinyint(1)              not null
);

create table document
(
    id            int auto_increment
        primary key,
    doc_detail_id int null,
    account_id    int not null,
    constraint document_account_id_fk
        foreign key (account_id) references account (id),
    constraint document_ibfk_2
        foreign key (doc_detail_id) references document_detail (id)
);

create index doc_detail_id
    on document (doc_detail_id);

create table `order`
(
    id         int auto_increment
        primary key,
    account_id int null,
    constraint order_ibfk_1
        foreign key (account_id) references account (id)
);

create index account_id
    on `order` (account_id);

create table order_detail
(
    id           int auto_increment
        primary key,
    order_id     int                                null,
    doc_id       int                                null,
    price        decimal(10, 2)                     null,
    created_date datetime default CURRENT_TIMESTAMP null,
    constraint order_detail_ibfk_1
        foreign key (order_id) references `order` (id),
    constraint order_detail_ibfk_2
        foreign key (doc_id) references document (id)
);

create index doc_id
    on order_detail (doc_id);

create index order_id
    on order_detail (order_id);

create table questions
(
    id           int auto_increment
        primary key,
    account_id   int              null,
    title        varchar(255)     null,
    detail       longtext         null,
    is_check     bit default b'0' null,
    is_deleted   bit default b'0' null,
    created_date datetime         null,
    constraint questions_ibfk_1
        foreign key (account_id) references account (id)
);

create table answer
(
    id         int auto_increment
        primary key,
    account_id int                     null,
    ques_id    int                     null,
    detail     tinytext                null,
    isDeleted  tinyint(1) default 0    null,
    is_deleted bit        default b'0' null,
    parent_id  int                     null,
    constraint answer_answer_id_fk
        foreign key (parent_id) references answer (id),
    constraint answer_ibfk_1
        foreign key (account_id) references account (id),
    constraint answer_ibfk_2
        foreign key (ques_id) references questions (id)
);

create table ans_vote
(
    id     int auto_increment
        primary key,
    ans_id int           null,
    count  int default 0 null,
    constraint ans_vote_ibfk_1
        foreign key (ans_id) references answer (id)
);

create index ans_id
    on ans_vote (ans_id);

create index account_id
    on answer (account_id);

create index ques_id
    on answer (ques_id);

create table images_ans
(
    id     int auto_increment
        primary key,
    name   text not null,
    ans_id int  not null,
    constraint images_ans_answer_id_fk
        foreign key (ans_id) references answer (id)
);

create table images_ques
(
    id      int auto_increment
        primary key,
    name    varchar(255) null,
    ques_id int          not null,
    constraint images_ques_questions_id_fk
        foreign key (ques_id) references questions (id)
);

create table question_vote
(
    id      int auto_increment
        primary key,
    ques_id int           null,
    count   int default 0 null,
    constraint question_vote_ibfk_1
        foreign key (ques_id) references questions (id)
);

create index ques_id
    on question_vote (ques_id);

create index account_id
    on questions (account_id);

create table `rank`
(
    id   int auto_increment
        primary key,
    name varchar(100) null,
    icon varchar(255) null
);

create table reputation
(
    id         int auto_increment
        primary key,
    account_id int null,
    rank_id    int null,
    point      int null,
    constraint reputation_ibfk_1
        foreign key (account_id) references account (id),
    constraint reputation_ibfk_2
        foreign key (rank_id) references `rank` (id)
);

create index account_id
    on reputation (account_id);

create index rank_id
    on reputation (rank_id);

create table tags
(
    id          int auto_increment
        primary key,
    question_id int          null,
    name        varchar(100) null,
    constraint tags_ibfk_1
        foreign key (question_id) references questions (id)
);

create index question_id
    on tags (question_id);

